//takes an initial velocity and angle and uses kinematic equations/trig functions to figure out
//the position of an object with respect to time.

var time =0;
let balls = [];

function setup() {
  createCanvas(1920, 600);

}

function draw() {
	background(50);

	
for(let i =0; i<56;i++){
	new CannonBall(70+i,45+i).shoot(time);
}

	if(time<50){
		time+=.15;
	}else{
		time=0;
	}
	
   }
   class CannonBall{

	constructor(inputVelocity, inputAngle){
		this.inputVelocity = inputVelocity;
		this.inputAngle = inputAngle*(3.14159265358979/180);
		this.startingX+300;
		this.startingY+700;
		this.finalX;
		this.finalY;
		this.velocityX;
		this.velocityY;
		this.time;
	}

	totalTime(){
		
		return (-2*this.velocity)/(-9.8);
	}

	finalX(){
		velocityX = this.inputVelocity*cos(this.angle);
		return velocityX*time;
	}

	finalY(){
		velocityY = this.inputVelocity*sin(angle);
		return (velocityY*time)+(.5*-9.8*time*time);
	}

	degreesToRadians(degrees){
		return degrees*(3.14159265358979/180);
	}

	radiansToDegrees(radians){
		return radians*(180/3.14159265358979);
	}
	
	shoot(time){
			this.velocityX = this.inputVelocity*cos(this.inputAngle);
			this.velocityY = this.inputVelocity*sin(this.inputAngle);
			this.time = time;
			var x = this.velocityX*time;
			var y = (-this.velocityY*time)+(-.5*-9.8*time*time);

			ellipse(x+500,y+600,30,30);
			
		
	}
}
